.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Pilot 3pm"
.TH Pilot 3pm "2006-05-31" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH ""
.IX Header ""
Commands include:
.PP
\&\fBNotice!\fR This information is out of date, and potentially quite
misleading.
.IP "PDA::Pilot::Appointment::Unpack(buffer)" 4
.IX Item "PDA::Pilot::Appointment::Unpack(buffer)"
Returns hash reference containing appointment (datebook entry) in a usable
format, given a record from a .pdb file or a Pilot database.
.IP "PDA::Pilot::Appointment::Pack(buffer)" 4
.IX Item "PDA::Pilot::Appointment::Pack(buffer)"
Given a hash reference in the form that the previous call generates, returns 
a single string suitable for storing in a Pilot's database.
.IP "PDA::Pilot::Appointment::UnpackAppInfo(buffer)" 4
.IX Item "PDA::Pilot::Appointment::UnpackAppInfo(buffer)"
Returns hash reference containing appointment (datebook entry) in a usable
format, given the AppInfo record from a .pdb file or a Pilot database.
.IP "PDA::Pilot::Appointment::PackAppInfo(buffer)" 4
.IX Item "PDA::Pilot::Appointment::PackAppInfo(buffer)"
Given a hash reference in the form that the previous call generates, returns 
a single string suitable for storing in a Pilot's database AppInfo block.
.IP "PDA::Pilot::Memo::Unpack(buffer)" 4
.IX Item "PDA::Pilot::Memo::Unpack(buffer)"
Returns hash reference containing appointment (datebook entry) in a usable
format, given a record from a .pdb file or a Pilot database.
.IP "PDA::Pilot::Memo::Pack(buffer)" 4
.IX Item "PDA::Pilot::Memo::Pack(buffer)"
Given a hash reference in the form that the previous call generates, returns 
a single string suitable for storing in a Pilot's database.
.IP "PDA::Pilot::Memo::UnpackAppInfo(buffer)" 4
.IX Item "PDA::Pilot::Memo::UnpackAppInfo(buffer)"
Returns hash reference containing appointment (datebook entry) in a usable
format, given the AppInfo record from a .pdb file or a Pilot database.
.IP "PDA::Pilot::Memo::PackAppInfo(buffer)" 4
.IX Item "PDA::Pilot::Memo::PackAppInfo(buffer)"
Given a hash reference in the form that the previous call generates, returns 
a single string suitable for storing in a Pilot's database AppInfo block.
.IP "PDA::Pilot::ToDo::Unpack(buffer)" 4
.IX Item "PDA::Pilot::ToDo::Unpack(buffer)"
Returns hash reference containing appointment (datebook entry) in a usable
format, given a record from a .pdb file or a Pilot database.
.IP "PDA::Pilot::ToDo::Pack(buffer)" 4
.IX Item "PDA::Pilot::ToDo::Pack(buffer)"
Given a hash reference in the form that the previous call generates, returns 
a single string suitable for storing in a Pilot's database.
.IP "PDA::Pilot::ToDo::UnpackAppInfo(buffer)" 4
.IX Item "PDA::Pilot::ToDo::UnpackAppInfo(buffer)"
Returns hash reference containing appointment (datebook entry) in a usable
format, given the AppInfo record from a .pdb file or a Pilot database.
.IP "PDA::Pilot::ToDo::PackAppInfo(buffer)" 4
.IX Item "PDA::Pilot::ToDo::PackAppInfo(buffer)"
Given a hash reference in the form that the previous call generates, returns 
a single string suitable for storing in a Pilot's database AppInfo block.
.IP "PDA::Pilot::Address::Unpack(buffer)" 4
.IX Item "PDA::Pilot::Address::Unpack(buffer)"
Returns hash reference containing appointment (datebook entry) in a usable
format, given a record from a .pdb file or a Pilot database.
.IP "PDA::Pilot::Address::Pack(buffer)" 4
.IX Item "PDA::Pilot::Address::Pack(buffer)"
Given a hash reference in the form that the previous call generates, returns 
a single string suitable for storing in a Pilot's database.
.IP "PDA::Pilot::Address::UnpackAppInfo(buffer)" 4
.IX Item "PDA::Pilot::Address::UnpackAppInfo(buffer)"
Returns hash reference containing appointment (datebook entry) in a usable
format, given the AppInfo record from a .pdb file or a Pilot database.
.IP "PDA::Pilot::Address::PackAppInfo(buffer)" 4
.IX Item "PDA::Pilot::Address::PackAppInfo(buffer)"
Given a hash reference in the form that the previous call generates, returns 
a single string suitable for storing in a Pilot's database AppInfo block.
.IP "PDA::Pilot::Mail::Unpack(buffer)" 4
.IX Item "PDA::Pilot::Mail::Unpack(buffer)"
Returns hash reference containing appointment (datebook entry) in a usable
format, given a record from a .pdb file or a Pilot database.
.IP "PDA::Pilot::Mail::Pack(buffer)" 4
.IX Item "PDA::Pilot::Mail::Pack(buffer)"
Given a hash reference in the form that the previous call generates, returns 
a single string suitable for storing in a Pilot's database.
.IP "PDA::Pilot::Mail::UnpackAppInfo(buffer)" 4
.IX Item "PDA::Pilot::Mail::UnpackAppInfo(buffer)"
Returns hash reference containing appointment (datebook entry) in a usable
format, given the AppInfo record from a .pdb file or a Pilot database.
.IP "PDA::Pilot::Mail::PackAppInfo(buffer)" 4
.IX Item "PDA::Pilot::Mail::PackAppInfo(buffer)"
Given a hash reference in the form that the previous call generates, returns 
a single string suitable for storing in a Pilot's database AppInfo block.
.IP "PDA::Pilot::Socket::socket(domain, type, protocol)" 4
.IX Item "PDA::Pilot::Socket::socket(domain, type, protocol)"
Same as pi-link routine called pi_socket.
.IP "PDA::Pilot::Socket::close(socket)" 4
.IX Item "PDA::Pilot::Socket::close(socket)"
Same as pi-link routine called pi_close.
.IP "PDA::Pilot::Socket::write(socket, string)" 4
.IX Item "PDA::Pilot::Socket::write(socket, string)"
Same as pi-link routine called pi_write.
.IP "PDA::Pilot::Socket::read(socket, len)" 4
.IX Item "PDA::Pilot::Socket::read(socket, len)"
Same as pi-link routine called pi_write (returns read data as result.)
.IP "PDA::Pilot::Socket::listen(socket, backlog)" 4
.IX Item "PDA::Pilot::Socket::listen(socket, backlog)"
Same as pi-link routine called pi_listen.
.IP "PDA::Pilot::Socket::bind(socket, sockaddr)" 4
.IX Item "PDA::Pilot::Socket::bind(socket, sockaddr)"
Same as pi-link routine called pi_bind. Sockaddr may either be a packed
string containing a pi_sockaddr structure, or a hash reference containing
\&\*(L"device\*(R", \*(L"family\*(R", and \*(L"port\*(R" keys.
.IP "PDA::Pilot::Socket::accept(socket)" 4
.IX Item "PDA::Pilot::Socket::accept(socket)"
Same as pi-link routine called pi_accept. If connection is successfull, returns
reference to hash containing remote address, as described above. If failed, returns
undef.
.IP "\fIPDA::Pilot::DLP::errno()\fR" 4
.IX Item "PDA::Pilot::DLP::errno()"
Returns last \s-1DLP\s0 error, resetting error to zero.
.IP "PDA::Pilot::DLP::GetSysDateTime(socket)" 4
.IX Item "PDA::Pilot::DLP::GetSysDateTime(socket)"
Same as \s-1DLP\s0 call dlp_GetSysDateTime. If successfull, returns time, otherwise
returns undef.
.IP "PDA::Pilot::DLP::SetSysDateTime(socket, time)" 4
.IX Item "PDA::Pilot::DLP::SetSysDateTime(socket, time)"
Same as \s-1DLP\s0 call dlp_SetSysDateTime. time must be a time_t value.
.IP "PDA::Pilot::DLP::ReadSysInfo(socket)" 4
.IX Item "PDA::Pilot::DLP::ReadSysInfo(socket)"
Same as \s-1DLP\s0 call dlp_ReadSysInfo. If successfull, returns reference to hash
containing system information.
.IP "PDA::Pilot::DLP::ReadStorageInfo(socket, cardno)" 4
.IX Item "PDA::Pilot::DLP::ReadStorageInfo(socket, cardno)"
Same as \s-1DLP\s0 call dlp_ReadStorageInfo. If successfull, returns reference to hash
containing information on given memory card.
.IP "PDA::Pilot::DLP::ReadUserInfo(socket)" 4
.IX Item "PDA::Pilot::DLP::ReadUserInfo(socket)"
Same as \s-1DLP\s0 call dlp_ReadUserInfo. If successfull, returns reference to hash
containing information about user settings.
.IP "PDA::Pilot::DLP::WriteUserInfo(socket, info)" 4
.IX Item "PDA::Pilot::DLP::WriteUserInfo(socket, info)"
Same as \s-1DLP\s0 call dlp_WriteUserInfo. info must be a reference to a hash
containing data similar to that returned by ReadUserInfo (Note: the password
can not be set through this call.)
.IP "PDA::Pilot::DLP::OpenDB(socket, cardno, mode, name)" 4
.IX Item "PDA::Pilot::DLP::OpenDB(socket, cardno, mode, name)"
Same as \s-1DLP\s0 call dlp_OpenDB. If successfull returns database handle,
otherwise returns undef.
.IP "PDA::Pilot::DLP::CloseDB(socket, handle)" 4
.IX Item "PDA::Pilot::DLP::CloseDB(socket, handle)"
Same as \s-1DLP\s0 call dlp_CloseDB.
.IP "PDA::Pilot::DLP::EndOfSync(socket, status)" 4
.IX Item "PDA::Pilot::DLP::EndOfSync(socket, status)"
Same as \s-1DLP\s0 call dlp_EndOfSync.
.IP "PDA::Pilot::DLP::AbortSync(socket)" 4
.IX Item "PDA::Pilot::DLP::AbortSync(socket)"
Same as \s-1DLP\s0 call dlp_AbortSync.
.IP "PDA::Pilot::DLP::MoveCategory(socket, handle, fromcat, tocat)" 4
.IX Item "PDA::Pilot::DLP::MoveCategory(socket, handle, fromcat, tocat)"
Same as \s-1DLP\s0 call dlp_MoveCategory.
.IP "PDA::Pilot::DLP::ResetSystem(socket)" 4
.IX Item "PDA::Pilot::DLP::ResetSystem(socket)"
Same as \s-1DLP\s0 call dlp_ResetSystem.
.IP "PDA::Pilot::DLP::OpenConduit(socket)" 4
.IX Item "PDA::Pilot::DLP::OpenConduit(socket)"
Same as \s-1DLP\s0 call dlp_OpenConduit.
.IP "PDA::Pilot::DLP::AddSyncLogEntry(socket, message)" 4
.IX Item "PDA::Pilot::DLP::AddSyncLogEntry(socket, message)"
Same as \s-1DLP\s0 call dlp_AddSyncLogEntry
.IP "PDA::Pilot::DLP::CleanUpDatabase(socket, handle)" 4
.IX Item "PDA::Pilot::DLP::CleanUpDatabase(socket, handle)"
Same as \s-1DLP\s0 call dlp_CleanUpDatabase.
.IP "PDA::Pilot::DLP::ResetSyncFlags(socket, handle)" 4
.IX Item "PDA::Pilot::DLP::ResetSyncFlags(socket, handle)"
Same as \s-1DLP\s0 call dlp_ResetSyncFlags.
.IP "PDA::Pilot::DLP::ResetDBIndex(socket, handle)" 4
.IX Item "PDA::Pilot::DLP::ResetDBIndex(socket, handle)"
Same as \s-1DLP\s0 call dlp_ResetDBIndex.
.IP "PDA::Pilot::DLP::ResetLastSyncPC(socket)" 4
.IX Item "PDA::Pilot::DLP::ResetLastSyncPC(socket)"
Same as \s-1DLP\s0 call dlp_ResetLastSyncPC.
.IP "PDA::Pilot::DLP::DeleteCategory(socket, handle, category)" 4
.IX Item "PDA::Pilot::DLP::DeleteCategory(socket, handle, category)"
Same as \s-1DLP\s0 call dlp_DeleteCategory.
.IP "PDA::Pilot::DLP::DeleteRecord(socket, handle, all, id)" 4
.IX Item "PDA::Pilot::DLP::DeleteRecord(socket, handle, all, id)"
Same as \s-1DLP\s0 call dlp_DeleteRecord.
.IP "PDA::Pilot::DLP::ReadDBList(socket, cardno, flags, start)" 4
.IX Item "PDA::Pilot::DLP::ReadDBList(socket, cardno, flags, start)"
Same as \s-1DLP\s0 call dlp_ReadDBList. If successfull, returns reference
to hash containing \s-1DB\s0 information. If failed, returns undef.
.IP "PDA::Pilot::DLP::FindDBInfo(socket, cardno, flags, name, type, creator)" 4
.IX Item "PDA::Pilot::DLP::FindDBInfo(socket, cardno, flags, name, type, creator)"
Same as \s-1DLP\s0 call dlp_FindDBInfo. If successfull, returns reference
to hash containing \s-1DB\s0 information. If failed, returns undef.
.IP "PDA::Pilot::DLP::ReadFeature(socket, creator, number)" 4
.IX Item "PDA::Pilot::DLP::ReadFeature(socket, creator, number)"
Same as \s-1DLP\s0 call dlp_ReadFeature. If successfull, returns feature value. If
failed, returns undef.
.IP "PDA::Pilot::DLP::ReadAppBlock(socket, handle)" 4
.IX Item "PDA::Pilot::DLP::ReadAppBlock(socket, handle)"
Same as \s-1DLP\s0 call dlp_ReadAppBlock. If successfull, returns app block. If
failed, returns undef.
.IP "PDA::Pilot::DLP::ReadSortBlock(socket, handle)" 4
.IX Item "PDA::Pilot::DLP::ReadSortBlock(socket, handle)"
Same as \s-1DLP\s0 call dlp_ReadSortBlock. If successfull, returns app block. If
failed, returns undef.
.IP "PDA::Pilot::DLP::WriteAppBlock(socket, handle, block)" 4
.IX Item "PDA::Pilot::DLP::WriteAppBlock(socket, handle, block)"
Same as \s-1DLP\s0 call dlp_WriteAppBlock.
.IP "PDA::Pilot::DLP::WriteSortBlock(socket, handle, block)" 4
.IX Item "PDA::Pilot::DLP::WriteSortBlock(socket, handle, block)"
Same as \s-1DLP\s0 call dlp_WriteSortBlock.
.IP "PDA::Pilot::DLP::ReadOpenDBInfo(socket, handle)" 4
.IX Item "PDA::Pilot::DLP::ReadOpenDBInfo(socket, handle)"
Same as \s-1DLP\s0 call dlp_ReadOpenDBInfo.
.IP "PDA::Pilot::DLP::ReadRecordByIndex(socket, handle, index)" 4
.IX Item "PDA::Pilot::DLP::ReadRecordByIndex(socket, handle, index)"
Same as \s-1DLP\s0 call dlp_ReadRecordByIndex. If call fails, it returns undef.
Otherwise, in scalar context it returns the read record, in array it returns
the record, id, index, attr, and category, in that order.
.IP "PDA::Pilot::DLP::ReadRecordById(socket, handle, id)" 4
.IX Item "PDA::Pilot::DLP::ReadRecordById(socket, handle, id)"
Same as \s-1DLP\s0 call dlp_ReadRecordById. If call fails, it returns undef.
Otherwise, in scalar context it returns the read record, in array it returns
the record, id, index, attr, and category, in that order.
.IP "PDA::Pilot::DLP::ReadNextModifiedRec(socket, handle)" 4
.IX Item "PDA::Pilot::DLP::ReadNextModifiedRec(socket, handle)"
Same as \s-1DLP\s0 call dlp_ReadNextModifiedRec. If call fails, it returns undef.
Otherwise, in scalar context it returns the read record, in array it returns
the record, id, index, attr, and category, in that order.
.IP "PDA::Pilot::DLP::ReadNextRecInCategory(socket, handle, category)" 4
.IX Item "PDA::Pilot::DLP::ReadNextRecInCategory(socket, handle, category)"
Same as \s-1DLP\s0 call dlp_ReadNextRecInCategory. If call fails, it returns undef.
Otherwise, in scalar context it returns the read record, in array it returns
the record, id, index, attr, and category, in that order.
.IP "PDA::Pilot::DLP::ReadNextModifiedRecInCategory(socket, handle, category)" 4
.IX Item "PDA::Pilot::DLP::ReadNextModifiedRecInCategory(socket, handle, category)"
Same as \s-1DLP\s0 call dlp_ReadNextModifiedRecInCategory. If call fails, it returns undef.
Otherwise, in scalar context it returns the read record, in array it returns
the record, id, index, attr, and category, in that order.
.IP "PDA::Pilot::DLP::WriteRecord(socket, handle, record, id, attr, category)" 4
.IX Item "PDA::Pilot::DLP::WriteRecord(socket, handle, record, id, attr, category)"
Same as \s-1DLP\s0 call dlp_WriteRecord.
.IP "PDA::Pilot::DLP::ReadResourceByType(socket, handle, type, id)" 4
.IX Item "PDA::Pilot::DLP::ReadResourceByType(socket, handle, type, id)"
Same as \s-1DLP\s0 call dlp_ReadResourceByType. If call fails, it returns undef.
Otherwise, in scalar context it returns the read record, in array it returns
the record, type, id, and index, in that order.
.IP "PDA::Pilot::DLP::ReadResourceByIndex(socket, handle, index)" 4
.IX Item "PDA::Pilot::DLP::ReadResourceByIndex(socket, handle, index)"
Same as \s-1DLP\s0 call dlp_ReadResourceByIndex. If call fails, it returns undef.
Otherwise, in scalar context it returns the read record, in array it returns
the record, type, id, and index, in that order.
.IP "PDA::Pilot::DLP::WriteResource(socket, handle, record, type, id)" 4
.IX Item "PDA::Pilot::DLP::WriteResource(socket, handle, record, type, id)"
Same as \s-1DLP\s0 call dlp_WriteResource.
.IP "PDA::Pilot::DLP::DeleteResource(socket, handle, all, type, id)" 4
.IX Item "PDA::Pilot::DLP::DeleteResource(socket, handle, all, type, id)"
Same as \s-1DLP\s0 call dlp_DeleteResource.
.IP "PDA::Pilot::DLP::CallApplication(socket, creator, type, action, data)" 4
.IX Item "PDA::Pilot::DLP::CallApplication(socket, creator, type, action, data)"
Same as \s-1DLP\s0 call dlp_CallApplication.
.IP "PDA::Pilot::File::open(name)" 4
.IX Item "PDA::Pilot::File::open(name)"
Same as pi_file_open. Returns a PDA::Pilot::File object on success.
.IP "PDA::Pilot::File::close(file)" 4
.IX Item "PDA::Pilot::File::close(file)"
Same as pi_file_close.
.IP "PDA::Pilot::File::get_app_info(file)" 4
.IX Item "PDA::Pilot::File::get_app_info(file)"
Same as pi_file_get_app_info.
.IP "PDA::Pilot::File::get_sort_info(file)" 4
.IX Item "PDA::Pilot::File::get_sort_info(file)"
Same as pi_file_get_sort_info.
.IP "PDA::Pilot::File::get_entries(file)" 4
.IX Item "PDA::Pilot::File::get_entries(file)"
Same as pi_file_get_entries.
.IP "PDA::Pilot::File::read_resource(file, index)" 4
.IX Item "PDA::Pilot::File::read_resource(file, index)"
Same as pi_file_read_resource. Returns (record, type, id, index).
.IP "PDA::Pilot::File::read_record(file, index)" 4
.IX Item "PDA::Pilot::File::read_record(file, index)"
Same as pi_file_read_record. Returns (record, id, index, attr, category).
.IP "PDA::Pilot::File::read_record_by_id(file, type, id)" 4
.IX Item "PDA::Pilot::File::read_record_by_id(file, type, id)"
Same as pi_file_read_record_by_id. Returns (record, id, index, attr, category).
.IP "PDA::Pilot::File::create(name, info)" 4
.IX Item "PDA::Pilot::File::create(name, info)"
Same as pi_file_create. Info is reference to hash containg dbinfo data.
.IP "PDA::Pilot::File::get_info(file)" 4
.IX Item "PDA::Pilot::File::get_info(file)"
Same as pi_file_get_info.
.IP "PDA::Pilot::File::set_info(file, info)" 4
.IX Item "PDA::Pilot::File::set_info(file, info)"
Same as pi_file_set_info.
.IP "PDA::Pilot::File::set_app_info(file, data)" 4
.IX Item "PDA::Pilot::File::set_app_info(file, data)"
Same as pi_file_set_app_info.
.IP "PDA::Pilot::File::set_sort_info(file, data)" 4
.IX Item "PDA::Pilot::File::set_sort_info(file, data)"
Same as pi_file_set_sort_info.
.IP "PDA::Pilot::File::append_resource(file, data, type, id)" 4
.IX Item "PDA::Pilot::File::append_resource(file, data, type, id)"
Same as pi_file_append_resource.
.IP "PDA::Pilot::File::append_record(file, data, attr, category, id)" 4
.IX Item "PDA::Pilot::File::append_record(file, data, attr, category, id)"
Same as pi_file_append_record.
.IP "PDA::Pilot::File::install(file, socket, cardno)" 4
.IX Item "PDA::Pilot::File::install(file, socket, cardno)"
Same as pi_file_install.
.IP "PDA::Pilot::File::retrieve(file, socket, cardno)" 4
.IX Item "PDA::Pilot::File::retrieve(file, socket, cardno)"
Same as pi_file_retrieve.
